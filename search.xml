<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML基础---学习手记</title>
    <url>/2021/09/22/HTML%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="HTML布局元素"><a href="#HTML布局元素" class="headerlink" title="HTML布局元素"></a>HTML布局元素</h2><blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/arieskoo/Downloads/1-Self-Learning/Blog/%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/Layout.jpg" alt="Layout"></p>
</blockquote>
<h2 id="多媒体嵌入"><a href="#多媒体嵌入" class="headerlink" title="多媒体嵌入"></a>多媒体嵌入</h2><h3 id="图片—img"><a href="#图片—img" class="headerlink" title="图片—img"></a>图片—img</h3><p> 为图片提供一个语义容器，在标题和图片之间建立清晰的关联，使用HTML5 的<figure>和<figcaption>元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;当图片无法显示时&quot;</span> <span class="attr">title</span>=<span class="string">&quot;当鼠标悬浮在图片时说明图片&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>说明图片的描述文字<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="视频和音频—video-amp-audio"><a href="#视频和音频—video-amp-audio" class="headerlink" title="视频和音频—video&amp;audio"></a>视频和音频—video&amp;audio</h2><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频资源地址&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    不支持视频时显示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>controls</em> 显示浏览器提供的控件界面</p>
<h4 id="使用多个播放源以提高兼容性"><a href="#使用多个播放源以提高兼容性" class="headerlink" title="使用多个播放源以提高兼容性"></a>使用多个播放源以提高兼容性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    浏览器不支持该视频时显示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> WebM 和 MP4 两种格式在目前已经足够支持大多数平台和浏览器。</p>
<h4 id="其他video特性—H5"><a href="#其他video特性—H5" class="headerlink" title="其他video特性—H5"></a>其他video特性—H5</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">       <span class="attr">poster</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的浏览器不支持 HTML5 视频。可点击<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;rabbit320.mp4&quot;</span>&gt;</span>此链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>观看<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>poster</em>—视频的封面</p>
<h3 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a>audio标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>你的浏览器不支持 HTML5 音频时显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>audio没有视觉部件，所以除了不支持width、height和poster之外，它支持video所以video标签拥有的特性。</p>
<h3 id="Iframe元素—嵌入技术"><a href="#Iframe元素—嵌入技术" class="headerlink" title="Iframe元素—嵌入技术"></a>Iframe元素—嵌入技术</h3><p>embed和object元素主要用来嵌入PDF和SVG、Flash，但现今它们都在逐渐被淘汰，只有iframe现在经常还被使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>**<em>allowfullscreen:</em> **允许进行全屏展示</p>
<p><em><strong>frameborder:</strong></em> 绘制边框（推荐在CSS中用border）</p>
<p><em><strong>sandbox:</strong></em> 提高安全性</p>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-320w.jpg 320w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-480w.jpg 480w,</span></span></span><br><span class="line"><span class="tag"><span class="string">             elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 320px) 280px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            (max-width: 480px) 440px,</span></span></span><br><span class="line"><span class="tag"><span class="string">            800px&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;elva-fairy-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Elva dressed as a fairy&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em><strong>srcset:</strong></em> 图像地址 固有宽度（以w为单位）</p>
<p><em><strong>sizes:</strong></em> (媒体条件) 槽的宽度（条件为真时）</p>
<p><strong>运行机制：</strong></p>
<pre><code>                1. 检查设备宽度
                   2. 检查sizes列表中哪个媒体条件第一个为真
                   3. 查看对应的槽宽度
                   4. 加载srcset列表中最接近该槽大小的图像
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>My first blog</title>
    <url>/2021/02/14/My-first-blog/</url>
    <content><![CDATA[<p>##Fist Charpter</p>
<p>content</p>
<hr>
<p>##Second Charpter</p>
<p>content</p>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>content</p>
<p>:wq</p>
]]></content>
  </entry>
  <entry>
    <title>使用Python设置本地测试服务器</title>
    <url>/2021/09/16/Python-localServer/</url>
    <content><![CDATA[<h2 id="测试本地文件的问题"><a href="#测试本地文件的问题" class="headerlink" title="测试本地文件的问题"></a>测试本地文件的问题</h2><ul>
<li><strong>它们具有异步请求功能</strong>。如果您只是从本地文件运行示例，某些浏览器（包括 Chrome）将不会运行异步请求。这是因为安全限制。</li>
<li><strong>它们具有服务器端语言</strong>。服务器端语言（例如 PHP 或 Python）需要一个特殊的服务器来解释代码并交付结果。</li>
</ul>
<h2 id="利用Python建立简单本地HTTP服务器"><a href="#利用Python建立简单本地HTTP服务器" class="headerlink" title="利用Python建立简单本地HTTP服务器"></a>利用Python建立简单本地HTTP服务器</h2><ul>
<li><p>安装Python</p>
</li>
<li><p>运行命令行（我是mac），输入以下命令检查是否安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li>
<li><p>cd到目标文件目录</p>
</li>
<li><p>启动服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></li>
<li><p>默认端口号是8000，通过localhost:8000来访问此服务器</p>
</li>
<li><p><strong>PS:</strong> 切换端口号使用如下命令（以7800端口号为例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 7800</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>最后， Python的http.server只是静态文件服务器，他无法运行python、php、javascript等语言的代码，所以要在本地运行服务器端语言代码，可以使用Python Web框架，比如Django等</strong></em></p>
]]></content>
  </entry>
  <entry>
    <title>Python virtualenv notes</title>
    <url>/2021/02/20/Python%20virtualenv%20notes/</url>
    <content><![CDATA[<h1 id="Python3-virtual-environment-construction"><a href="#Python3-virtual-environment-construction" class="headerlink" title="Python3 virtual environment construction"></a>Python3 virtual environment construction</h1><h2 id="1-Perface"><a href="#1-Perface" class="headerlink" title="1. Perface"></a>1. Perface</h2><ul>
<li><h3 id="Why-do-we-need-virtual-environment"><a href="#Why-do-we-need-virtual-environment" class="headerlink" title="Why do we need virtual environment"></a>Why do we need virtual environment</h3><p>Simply put, an individual virtual environment can be used by an individual python project so that every project won’t affect each other and also won’t affect the python system environment.</p>
</li>
<li><h3 id="Why-do-we-use-‘virtualenv’"><a href="#Why-do-we-use-‘virtualenv’" class="headerlink" title="Why do we use ‘virtualenv’"></a>Why do we use ‘virtualenv’</h3><p>In short, it’s the python official recommendation.</p>
</li>
</ul>
<hr>
<h2 id="2-Install-virtualenv"><a href="#2-Install-virtualenv" class="headerlink" title="2. Install virtualenv"></a>2. Install virtualenv</h2><p><em>PS: My laptop is MacBook, so the following procedure is based on the macbook terminal.</em></p>
<ol>
<li><p>Before installing, you should make sure you’ve already installed pip, and then use pip to install env.  </p>
<blockquote>
<p>pip3 install virtualenv</p>
</blockquote>
</li>
<li><p>Check if the installation is successful  </p>
<blockquote>
<p>virtualenv –version</p>
</blockquote>
</li>
<li><p>Create the big virtual environment  </p>
<p>Firstly, you should ‘cd’ to the directory where you wanna create VE(virtual environment)</p>
<blockquote>
<p> virtualenv envname #Here you should give your virtual environment name</p>
</blockquote>
<p>The environment will also install Python setuptools, pip, wheel automatically</p>
</li>
<li><p>Activate your environment</p>
<blockquote>
<p>Source bigenvname/bin/activate</p>
</blockquote>
</li>
<li><p>Extra procedure</p>
<p>For me, I often use terminal to start the editor, so when you activate the environment, Use ‘cd’ to the directory where you wanna store your code file. And then start jupyter notebook.</p>
<blockquote>
<p>jupyter notebook</p>
</blockquote>
<p>So now you can code in the envname virtual environment.</p>
</li>
</ol>
<hr>
<h2 id="3-Install-virtualenvwrapper"><a href="#3-Install-virtualenvwrapper" class="headerlink" title="3. Install virtualenvwrapper"></a>3. Install virtualenvwrapper</h2><p>*Note: Sometimes, we may create more than one VE, and we’d like to swap between the different VE. Hence, we need the command ‘workon’ which is belong to the package virtualenvwrapper. </p>
<ol>
<li><p>Install VEW. </p>
<blockquote>
<p>pip3 install virtualenvwrapper</p>
</blockquote>
</li>
<li><p>Configure VEW. </p>
<blockquote>
<p>export WORKON_HOME=’your sub-VE address’</p>
<p>source /usr/local/bin/virtualenvwrapper.sh  // execute the command package</p>
</blockquote>
<p>But what if your address is not the above default address, how could you find it? I faced the same problem before. We can try to uninstall the package ‘virtualenvwrapper’ and it will prompt us all the files address we would delete.</p>
<p>![截屏2021-02-20 13.24.51](/Users/arieskoo/Library/Application Support/typora-user-images/截屏2021-02-20 13.24.51.png)</p>
</li>
<li><p>After configuring all the environment parameters, we s=also need to execute source command to make it work. </p>
<blockquote>
<p>source ~/.bash_profile</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="4-Use-VEW-to-create-sub-environment"><a href="#4-Use-VEW-to-create-sub-environment" class="headerlink" title="4.  Use VEW to create sub-environment"></a>4.  Use VEW to create sub-environment</h2><ol>
<li><p>create sub-env</p>
<blockquote>
<p>makvirtualenv env01(envname)</p>
</blockquote>
<p>The default address is under the previous export WORKON_HOME=’your sub-VE address’.</p>
</li>
<li><p>Query the list of VE</p>
<blockquote>
<p>lsvirtualenv -b</p>
</blockquote>
</li>
<li><p>query the python pakcages</p>
<blockquote>
<p>lssitepackages</p>
</blockquote>
</li>
<li><p>exchange the sub-VE</p>
<blockquote>
<p>workon envname</p>
</blockquote>
</li>
<li><p>Remove sub-VE</p>
<blockquote>
<p>rmvirtualenv envname</p>
</blockquote>
</li>
<li><p>Install python packages in the sub-VE</p>
<blockquote>
<p>pip install packagename</p>
</blockquote>
</li>
<li><p>exit the sub-VE</p>
<blockquote>
<p>deactivate</p>
</blockquote>
</li>
<li><p>How to start VE every time start the PC</p>
<p>Since you totally exit the VE, you need to reactivate the big VE every time you wanna reenter it.</p>
<blockquote>
<p>cd big VE address</p>
<p>source bigenvname/bin/activate</p>
<p>workon sub-VEname</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/16/Rnotebook/</url>
    <content><![CDATA[<h1 id="R-Lab1-Note"><a href="#R-Lab1-Note" class="headerlink" title="R Lab1 Note"></a>R Lab1 Note</h1><h3 id="1-Basic-Operations"><a href="#1-Basic-Operations" class="headerlink" title="1   Basic Operations"></a>1   Basic Operations</h3><h4 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a>Arithmetic Operations</h4><ol>
<li><p>Define variable</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">y &lt;- 20</span><br></pre></td></tr></table></figure></li>
<li><p>Calculation operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x + y</span><br><span class="line">x * y</span><br><span class="line">x / y</span><br><span class="line">x ^ y</span><br><span class="line">x %% y <span class="comment"># the module of x/y</span></span><br><span class="line"><span class="built_in">log</span>(x,y) <span class="comment"># The log to the base y of x</span></span><br><span class="line"><span class="built_in">sqrt</span>(x) <span class="comment"># the square root of x</span></span><br><span class="line">mean(<span class="built_in">c</span>(x,y)) <span class="comment"># the mean between x and y, but remember to use the vector in the mean function!!!</span></span><br><span class="line"><span class="built_in">trunc</span>(x) <span class="comment"># discard the decimals of x</span></span><br><span class="line"><span class="built_in">round</span>(x,y) <span class="comment"># generally use rounding and keep y decimal places, but will be affected by floating point numbers</span></span><br></pre></td></tr></table></figure>
<h4 id="Logical-Operations"><a href="#Logical-Operations" class="headerlink" title="Logical Operations"></a>Logical Operations</h4></li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &gt;= y -<span class="number">3</span> <span class="comment"># arithmetic operations take priority</span></span><br><span class="line">x &lt;= y</span><br><span class="line">x == y</span><br><span class="line">x != y</span><br><span class="line">w &lt;- <span class="literal">TRUE</span></span><br><span class="line">z &lt;- <span class="literal">FALSE</span></span><br><span class="line">!w <span class="comment"># not</span></span><br><span class="line">w | z <span class="comment"># or</span></span><br><span class="line">w &amp; z <span class="comment"># and</span></span><br><span class="line">isTRUE(operation) <span class="comment"># identify if the result is TRUE</span></span><br><span class="line">identical(x,y) <span class="comment"># only when the two objects are the same, it will return TRUE</span></span><br><span class="line">xor(operation1,operation2) <span class="comment"># only when one is TRUE and the other is FALSE, it will return TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># which, any, all, three of them all use logical vector as its argument e.g. vector &gt; 10</span></span><br><span class="line">which(vector &gt; <span class="number">10</span>) <span class="comment"># It returns the index of all the TRUE elements in the vector.</span></span><br><span class="line"><span class="built_in">any</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when one or some elements is TRUE, it will return TRUE</span></span><br><span class="line"><span class="built_in">all</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when all the elements are TRUE, it will return TRUE</span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="2-Some-additional-functions"><a href="#2-Some-additional-functions" class="headerlink" title="2   Some additional functions"></a>2   Some additional functions</h3><blockquote>
<p><strong>For example</strong></p>
<p><strong>schoolmath</strong></p>
</blockquote>
<p><strong>Here are all its functions</strong></p>
<ol>
<li><p>cancel.fraction(numerator, denominator)</p>
<p><em>It cancels a fraction to its simplest form</em></p>
</li>
<li><p>decimal2fraction(decimal, period=0)</p>
<p><em>It converts a decimal number into a fraction and the argument period means the repeating ending number if it has.</em></p>
<p><em>E.g. 12.123444444…, so it will be decimal2fraction(12.123,4)</em></p>
</li>
<li><p>gcd(x, y)</p>
<p><em>It gives the greatest common divisor of two numbers, x and y</em></p>
</li>
<li><p>scm(x, y)</p>
<p><em>It gives the smallest common multiple of two numbers, x and y</em></p>
</li>
<li><p>is. type function</p>
<p><em>x can be a <strong>number</strong> or a <strong>vector</strong> and it returns <strong>TRUE/FALSE</strong></em></p>
<ul>
<li>is.decimal(x) </li>
<li>is.whole(x)</li>
<li>is.even(x)</li>
<li>Is.odd(x)</li>
<li>is.negative(x)</li>
<li>is.positive(x)</li>
<li>is.real.positive(x)      <em>zero is included as a positive number</em></li>
<li>is.prim(x)</li>
</ul>
</li>
<li><p>prime.factor(x)</p>
<p><em>It gives a <strong>vector</strong> of all the prime-factors (except 1) of a number x</em></p>
</li>
<li><p>primes(start, end)</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between start number and end number, if it’s not given start and end, it will give all the prim-numbers</em></p>
</li>
<li><p>primlist</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between 1 and 9999999</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">primlist[<span class="number">1</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p>#[1]  1  2  3  5  7 11 13 17 19 23</p>
</li>
</ol>
<h3 id="3-Some-Data-Structures"><a href="#3-Some-Data-Structures" class="headerlink" title="3    Some Data Structures"></a>3    Some Data Structures</h3><blockquote>
<p><em><strong>There are vectors, sequences, matrices, lists, arrays and data frames.</strong></em></p>
</blockquote>
<h4 id="3-1-Vectors-and-Sequences"><a href="#3-1-Vectors-and-Sequences" class="headerlink" title="3-1  Vectors and Sequences"></a>3-1  Vectors and Sequences</h4><h5 id="How-to-define-vectors-and-sequences"><a href="#How-to-define-vectors-and-sequences" class="headerlink" title="How to define vectors and sequences"></a>How to define vectors and sequences</h5><ol>
<li><p>Vectors</p>
<p>Use the c() function, which stands for ‘concatenate’:  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>If you want to create a vector with the same repeated value, use rep(x, times=) or rep(x, each=):  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),times=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 2 3 1 2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),each=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 2 2 3 3</p>
</li>
<li><p>Sequences</p>
<p>Use the : operator or the seq(from=, to=, by=) function</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">b &lt;- 1:<span class="number">100</span></span><br><span class="line">b1 &lt;- seq(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">b2 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>)</span><br><span class="line">b3 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>, by=<span class="number">1</span>)</span><br><span class="line">b4 &lt;- seq(to=<span class="number">100</span>, from=<span class="number">1</span>, by=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>#all the 5 outputs are same</p>
</li>
</ol>
<h5 id="Some-arithmetic-and-logical-operations"><a href="#Some-arithmetic-and-logical-operations" class="headerlink" title="Some arithmetic and logical operations"></a>Some arithmetic and logical operations</h5><ol>
<li><p>Select certain element using index</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2 3</p>
<p>For index selection, sequences are the same as vectors.</p>
<p><em><strong>NOTICE: In R, the first index is 0 which is totally different from most of other script languages!!!</strong></em></p>
</li>
<li><p>Logical operations application</p>
<p><strong>&gt;  &lt;  ==  !=</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE TRUE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[a&gt;<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    3</p>
<p>For logical operations, sequences are the same as vectors.</p>
</li>
<li><p>Arithmetic operations</p>
<p> <em>In most cases, these operations are performed</em> <em><strong>element by element</strong></em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a + <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 5 6</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a - -<span class="number">3</span>:-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 4 4</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a == <span class="number">5</span>:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE FALSE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    1.000000 1.414214 1.732051</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mean(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sd(a) <span class="comment"># standard deviation</span></span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">median(a) <span class="comment"># median</span></span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary(a) <span class="comment"># min max mean med quartile infromation</span></span><br></pre></td></tr></table></figure>
<p>#Min. 1st Qu.  Median    Mean  3rd Qu.    Max.</p>
<p>   1.0       1.5          2.0            2.0       2.5         3.0 </p>
</li>
</ol>
<h4 id="3-2-Matrices"><a href="#3-2-Matrices" class="headerlink" title="3-2  Matrices"></a>3-2  Matrices</h4><h5 id="1-How-to-define-matrices"><a href="#1-How-to-define-matrices" class="headerlink" title="1. How to define matrices"></a>1. How to define matrices</h5><ul>
<li>Use <strong>matrix()</strong> function, </li>
</ul>
<p>matrix(vector, nrow=r, ncol=c, byrow=FALSE, dimnames=list(char_vector_rownames, char_vector_colnames))</p>
<p><em>The default is the matrix is filled by columns</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st row&quot;</span>, <span class="string">&quot;2nd row&quot;</span>)</span><br><span class="line">cnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st col&quot;</span>, <span class="string">&quot;2nd col&quot;</span>)</span><br><span class="line">A &lt;- matrix(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),nrow=<span class="number">2</span>,byrow=<span class="literal">TRUE</span>, <span class="built_in">dimnames</span>=<span class="built_in">list</span>(rnames, cnames))</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Use bind function, <strong>rbind()     cbind()</strong></p>
<p><em>bind by row: rbind(v1, v2, …)</em></p>
<p><em>bind by col: bind(v1, v2, …)</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A &lt;- rbind(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>The two outputs are the same.</p>
</li>
</ul>
<h5 id="2-How-to-use-index"><a href="#2-How-to-use-index" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><p><em>Generally, matrices are 2 dimensions, so [rownumber, colnumber] can locate the certain element in the matrix.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># the element at the 1st row and 2nd col</span></span><br></pre></td></tr></table></figure>
<p><em>If we’d like to get certain whole row or column, we should leave the other dimension blank.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[,<span class="number">2</span>] <span class="comment"># 2nd column</span></span><br><span class="line">A[<span class="number">1</span>,] <span class="comment"># 1st row</span></span><br><span class="line">A[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>] <span class="comment"># row 1,2 of column 1</span></span><br><span class="line">A[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)] <span class="comment">#row 1,2 of column 1,2</span></span><br><span class="line">A[-<span class="number">1</span>,] <span class="comment"># drop 1st row and show other rows</span></span><br><span class="line">A[A%%2==<span class="number">0</span>] <span class="comment"># all the even numbers</span></span><br></pre></td></tr></table></figure>
<h5 id="3-Arithmetic-logical-and-statistical-operations"><a href="#3-Arithmetic-logical-and-statistical-operations" class="headerlink" title="3. Arithmetic, logical and statistical operations"></a>3. Arithmetic, logical and statistical operations</h5><ul>
<li><p><em>Mostly, the operations are performed element by element</em></p>
<p><strong>+  -  *  /  ^</strong></p>
</li>
<li><p>arithmetic matrix operation</p>
<p>e.g. <strong>%*%</strong> is the arithmetic matrix multiplication</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A %*% B</span><br></pre></td></tr></table></figure></li>
<li><p>statistical operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(A)</span><br><span class="line">mean(A) <span class="comment"># mean of all values</span></span><br><span class="line">rowMeans(A) <span class="comment"># mean by row</span></span><br><span class="line">colMeans(A) <span class="comment"># mean by column</span></span><br><span class="line">sd(A)</span><br><span class="line"><span class="built_in">length</span>(A) <span class="comment"># the number of all elements</span></span><br><span class="line">ncol(A) <span class="comment"># the number of columns</span></span><br><span class="line">nrow(A) <span class="comment"># the number of rows</span></span><br><span class="line">rowSums(A) <span class="comment"># the sum of each row</span></span><br><span class="line">colSums(A) <span class="comment"># the sum of each column</span></span><br></pre></td></tr></table></figure></li>
<li><p>logical operation</p>
<p><strong>element by element</strong></p>
<p><em>==    !=    &gt;    &lt;</em></p>
</li>
</ul>
<h4 id="3-3-Arrays"><a href="#3-3-Arrays" class="headerlink" title="3-3  Arrays"></a>3-3  Arrays</h4><h5 id="1-How-to-define"><a href="#1-How-to-define" class="headerlink" title="1. How to define"></a>1. How to define</h5><p><em>Arrays are similar to matrices but can have over 2 dimensions</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra &lt;- array(<span class="number">1</span>:<span class="number">8</span>,<span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), <span class="built_in">dimnames</span>=<span class="built_in">list</span>(<span class="built_in">c</span>(<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;y1&#x27;</span>,<span class="string">&#x27;y2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;z1&#x27;</span>,<span class="string">&#x27;z2&#x27;</span>))) <span class="comment"># 3D array which is the 2*2*2 structure</span></span><br></pre></td></tr></table></figure>
<h5 id="2-How-to-use-index-1"><a href="#2-How-to-use-index-1" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra[,,<span class="number">1</span>]</span><br><span class="line">arra[,,<span class="string">&#x27;z1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>The two outputs are both the 1st layer of 3rd axis.</p>
<h5 id="3-Operations"><a href="#3-Operations" class="headerlink" title="3. Operations"></a>3. Operations</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra1 &lt;- array(sample.int(<span class="number">100</span>,<span class="number">27</span>), <span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)) <span class="comment"># sample functiongenerates 27 random numbers between 0 and 100</span></span><br></pre></td></tr></table></figure>
<p><em>Most of them are the same as matrices, except statistical functions e.g. colMeans(), rowMeans() and rowSums(), colSums()</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rowMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be three numbers, of which one is <strong>mean of arra1[1/2/3,,]</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">colMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be a 3*3 matrix, where each element is <strong>the mean of arra1[,1/2/3,1/2/3]</strong></p>
<h3 id="4-Simple-Plots"><a href="#4-Simple-Plots" class="headerlink" title="4  Simple Plots"></a>4  Simple Plots</h3><h4 id="How-to-define"><a href="#How-to-define" class="headerlink" title="How to define"></a>How to define</h4><p><em>Use plot() function</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">diagram1 &lt;- plot(x, y, col=<span class="string">&quot;colorname&quot;</span>, type=<span class="string">&quot;the type of plot e.g. p/l/c/o/s/h/n&quot;</span>, pch=<span class="string">&quot;the shape of dot e.g. 0:25&quot;</span>, main=<span class="string">&quot;title&quot;</span>, xlab=<span class="string">&quot;X Label&quot;</span>, ylab=<span class="string">&quot;Y Label&quot;</span>, bg=<span class="string">&quot;dot color only when pch=21:25&quot;</span>, ...)</span><br></pre></td></tr></table></figure>


<p>Finally, there’re still some knowledge I haven’t mentioned, such as data frame and some more complicated applications of all the structures and plot() function. They will be discussed in the following notes later.</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端知识-杂谈</title>
    <url>/2021/09/21/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86-%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h2 id="前端趋势"><a href="#前端趋势" class="headerlink" title="前端趋势"></a>前端趋势</h2><p>目前有走向微前端的趋势，所谓微前端的提出，可以说是在MPA（多页）和SPA（单页）之间的折中，现今大多数网站都采用SPA，然而随着时间的推移，SPA内的东西越来越多，并且由于各部分之间的耦合性，使得维护成本越来越高。因此微前端的概念被提出，即降低内部的耦合性，实现类似高内聚低耦合的效果。目前流行的有Web-Component，将网页各部分模块化，各模块之间互不干扰，独立工作（例如各模块甚至可以使用不同的编程语言来编写）。（PS: 这一概念可以与后端的微服务对比参考）</p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript琐碎基础---学习手记</title>
    <url>/2021/09/24/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="? 条件运算符"></a>? 条件运算符</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2;</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>如果条件为真，则返回<code>value1</code>；否则，返回<code>value2</code></p>
<h1 id="‘-’空值合并"><a href="#‘-’空值合并" class="headerlink" title="‘??’空值合并"></a>‘??’空值合并</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = a ?? b;</span><br></pre></td></tr></table></figure>
<ol>
<li>如果a已定义，则结果为a</li>
<li>否则，结果为b</li>
</ol>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">alert(user ?? <span class="string">&quot;Anonymous&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h1><h2 id="Object-assign（浅拷贝）"><a href="#Object-assign（浅拷贝）" class="headerlink" title="Object.assign（浅拷贝）"></a>Object.assign（浅拷贝）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target_object, [source_object1, source_object2, source_object3...])</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> info = &#123;<span class="attr">age</span>: <span class="number">18</span>, <span class="attr">grade</span>: <span class="string">&quot;Master&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> drive = &#123;<span class="attr">canDrive</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(user, info, drive); <span class="comment">// user = &#123;name:&quot;Will&quot;, age: 18, grade: &quot;Master&quot;, canDrive: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new_user = <span class="built_in">Object</span>.assign(&#123;&#125;, user, info, drive); <span class="comment">// 返回一个新的对象</span></span><br></pre></td></tr></table></figure>
<p><strong>使用for loop实现</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name : <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age : <span class="number">18</span>,</span><br><span class="line">  grade: <span class="string">&quot;Master&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> clone = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line">  clone[key] = user[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="深层克隆（深拷贝）"><a href="#深层克隆（深拷贝）" class="headerlink" title="深层克隆（深拷贝）"></a>深层克隆（深拷贝）</h2><p><em><strong>由于上述的对象克隆（无论是for loop还是Object.assign）都是假设所有的属性为原始类型，但是对于对象的引用类型，则会失效。因为它会直接复制其引用，因此双方仍然会共用一个属性值</strong></em></p>
<p><strong>因此，我们需要深层克隆。</strong></p>
<h3 id="Json-parse-JSON-stringify-xxxx-—-通常"><a href="#Json-parse-JSON-stringify-xxxx-—-通常" class="headerlink" title="Json.parse(JSON.stringify(xxxx)) — 通常"></a>Json.parse(JSON.stringify(xxxx)) — 通常</h3><ul>
<li>Pros：简单易用</li>
<li>Cons：<pre><code>1. 会忽略undefined
 2. 会忽略symbol
 3. 不能序列化函数
 4. 不能解决循环引用的问题
</code></pre>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  age : <span class="number">10</span>,</span><br><span class="line">  jobs: &#123;</span><br><span class="line">    first: <span class="string">&quot;police&quot;</span>,</span><br><span class="line">    second: <span class="string">&quot;pilot&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line"></span><br><span class="line">a.jobs.first = <span class="string">&quot;programmer&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first); <span class="comment">// police</span></span><br></pre></td></tr></table></figure>
<h3 id="MessageChannel（消息通道）"><a href="#MessageChannel（消息通道）" class="headerlink" title="MessageChannel（消息通道）"></a>MessageChannel（消息通道）</h3><ul>
<li><p>Pros：</p>
<pre><code>1. 能解决undefined
 2. 能解决循环引用
</code></pre>
</li>
<li><p>Cons：异步函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    		<span class="keyword">const</span> &#123;port1, port2&#125; = <span class="keyword">new</span> MessageChannel();</span><br><span class="line">    		port2.onmessage = <span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;resolve(ev.data);&#125;</span><br><span class="line">        port1.postMessage(obj);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="comment">//之后再看</span></span><br></pre></td></tr></table></figure>
<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p><em><strong>简言之：JS引擎有一个被称作垃圾回收器的东西在后台自动运行，它监控所有对象的状态，然后删除那些已经不可达的对象（即不能访问到它了）</strong></em></p>
<h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>约定：</strong></p>
<ol>
<li>命名以大写字母开头</li>
<li>只能由new操作符来执行</li>
</ol>
<h1 id="可选链"><a href="#可选链" class="headerlink" title="可选链  ?."></a>可选链  ?.</h1><p><strong>简言之：</strong>如果可选链前面的部分是null或undefined则返回undefined；否则，返回该部分以及后面的访问属性</p>
<p><code>value?.prop</code>:</p>
<p>注：这里的不存在指的是该变量为null和undefined</p>
<ul>
<li>如果value存在，则返回value.prop</li>
<li>如果value不存在（即为null或undefined），则返回undefined，而不会像直接用<code>value.prop</code>一样报错</li>
</ul>
<p><strong>例子：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">user?.address?.name; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = &#123;<span class="attr">name</span>: <span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line">admin?.name; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">admin?.age; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><strong>扩展</strong></p>
<p><code>obj?.prop</code></p>
<p><code>obj?.[prop]</code></p>
<p><code>obj.methodName?.()</code></p>
<p><strong>最后</strong></p>
<p>注意使用<code>?.</code>时，一定要确保其前面的变量<em><strong>已经声明</strong></em>，否则同样会报错</p>
<h1 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>“Symbol”表示唯一的标识符，使用Symbol()来创建这种类型的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uniqueId = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uniqueId2 = <span class="built_in">Symbol</span>(<span class="string">&quot;id&quot;</span>); <span class="comment">// &quot;id&quot;为Symbol的一个描述</span></span><br></pre></td></tr></table></figure>
<p><strong>Symbol保证唯一性，即使具有相同描述的Symbol，它们的值也不同</strong></p>
<h3 id="Symbol不会被自动转化为字符串"><a href="#Symbol不会被自动转化为字符串" class="headerlink" title="Symbol不会被自动转化为字符串"></a>Symbol不会被自动转化为字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uniqueId = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"></span><br><span class="line">uniqueId.toString(); <span class="comment">// Symbol(uniqueId)</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol可以用来创建对象的“隐藏”属性"><a href="#Symbol可以用来创建对象的“隐藏”属性" class="headerlink" title="Symbol可以用来创建对象的“隐藏”属性"></a>Symbol可以用来创建对象的“隐藏”属性</h2><h2 id="可以作为对象的属性键"><a href="#可以作为对象的属性键" class="headerlink" title="可以作为对象的属性键"></a>可以作为对象的属性键</h2><p><strong>注：</strong>在对象字面量{…}中使用Symbol作为属性键时，需要将它用方括号括起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">&quot;will&quot;</span>,</span><br><span class="line">  [id]: <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>Symbol在for…in循环中会跳出，但Object.assign方法却不会忽略symbol属性键</strong></p>
<h2 id="全局Symbol注册表"><a href="#全局Symbol注册表" class="headerlink" title="全局Symbol注册表"></a>全局Symbol注册表</h2><p><strong>注：</strong>使用<code>Symbol.for(&quot;key&quot;)</code>的方式从全局注册表中读取描述为key的Symbol，如果不存在则创建一个新的Symbol（Symbol(key)），并通过给定的key将其存储在注册表中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><strong>反向调用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(sym); <span class="comment">// id</span></span><br></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="toString-base"><a href="#toString-base" class="headerlink" title="toString(base)"></a>toString(base)</h3><ul>
<li><p>base表示进制，例如base=2，就以二进制的形式进行返回该数的字符串形式</p>
</li>
<li><p>base的范围是2-36，常用的是2、16、36</p>
</li>
<li><p>如果在数字上直接调用该方法，则要使用2个点。如；<code>100..toString(2)</code>，第一个点JS识别为小数点</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">num.toString(<span class="number">2</span>); <span class="comment">// &#x27;10&#x27;</span></span><br><span class="line">num.toString(<span class="number">10</span>); <span class="comment">// &#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="舍入rounding"><a href="#舍入rounding" class="headerlink" title="舍入rounding"></a>舍入rounding</h3><ul>
<li><strong>Math.floor</strong>     向下取整</li>
<li><strong>Math.ceil</strong>        向上取整</li>
<li><strong>Math.round</strong>   四舍五入</li>
<li><strong>Math.trunc</strong>    舍去小数点后</li>
<li><strong>toFixed(n)</strong>       四舍五入保留小数点后n位，返回一个字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">12.36</span>;</span><br><span class="line">num.toFixed(<span class="number">1</span>); <span class="comment">// 12.4</span></span><br></pre></td></tr></table></figure>
<h3 id="不精确计算"><a href="#不精确计算" class="headerlink" title="不精确计算"></a>不精确计算</h3><h4 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1 + 0.2 !== 0.3"></a>0.1 + 0.2 !== 0.3</h4><p><strong>原因：</strong>0.1 + 0.2的结果为0.3000…04。这是因为数字以其二进制的形式存储在内存中，即一个1和0的序列，同时在二进制中，可以保证以2为整数次幂能精确存储，因此0.1和0.2在二进制中均为无限二进制，无法被精确存储。</p>
<p><strong>解决方法：</strong>使用<code>toFixed()</code>舍去小数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line">sum.toFixed(<span class="number">2</span>); <span class="comment">// &#x27;0.30&#x27;</span></span><br><span class="line">+sum.toFixed(<span class="number">2</span>); <span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure>
<h3 id="isFinite和isNaN"><a href="#isFinite和isNaN" class="headerlink" title="isFinite和isNaN"></a>isFinite和isNaN</h3><ul>
<li>Infinity &amp; -Infinity 表示无穷大</li>
<li>NaN表示<code>Not-A-Number</code></li>
</ul>
<p><strong>isNaN判断一个参数是否为Number</strong>（判断之前先将它们专为数字然后再判断）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;str&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;12&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">12</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="parseInt-amp-parseFloat"><a href="#parseInt-amp-parseFloat" class="headerlink" title="parseInt &amp; parseFloat"></a>parseInt &amp; parseFloat</h3><p><em><strong><code>+</code>和<code>Number()</code>可以进行数字转换，但如果其不是数字字符串则会转换失败并返回<code>NaN</code></strong></em></p>
<p>使用parseInt和parseFloat可以解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;100px&#x27;</span>); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;12.555px&#x27;</span>); <span class="comment">// 12.555</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;px1000&#x27;</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;px12.555&#x27;</span>); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
<p><code>parseInt(str, base)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;0xff&#x27;</span>, <span class="number">16</span>); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure>
<h3 id="内建Math其他函数"><a href="#内建Math其他函数" class="headerlink" title="内建Math其他函数"></a>内建Math其他函数</h3><ul>
<li>Math.random() — 返回一个0-1的随机数（不包括1）</li>
<li>Math.max(a, b, c, …) —- 返回一个最大数</li>
<li>Math.min(a, b, c, …) —- 返回一个最小数</li>
<li>Math.pow(n, power) — 返回n<sup>power</sup></li>
</ul>
<h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p>en(n为数字)表示1*10<sup>n</sup></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Twothousand = <span class="number">2e3</span>; <span class="comment">// 2000</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">`s`</span>;</span><br></pre></td></tr></table></figure>
<p>反引号允许</p>
<ol>
<li>使用<code>$&#123;...&#125;</code>将任何表达式嵌入</li>
<li>换行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s4 = <span class="string">`s2是<span class="subst">$&#123;s3&#125;</span>。1+2=<span class="subst">$&#123;sum(<span class="number">1</span>,<span class="number">2</span>)&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;William&quot;</span>;</span><br><span class="line">word.length; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure>
<h3 id="获取某一位置的字符"><a href="#获取某一位置的字符" class="headerlink" title="获取某一位置的字符"></a>获取某一位置的字符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">word[<span class="number">0</span>]; <span class="comment">// H</span></span><br><span class="line">word.charAt(<span class="number">0</span>); <span class="comment">// H</span></span><br></pre></td></tr></table></figure>
<p><strong>可以使用<code>for ... of</code>遍历字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> alphabet <span class="keyword">of</span> <span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">  alert(alphabet); <span class="comment">// H e l l o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串unmutable"><a href="#字符串unmutable" class="headerlink" title="字符串unmutable"></a>字符串unmutable</h3><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>$\textcolor{blue}{toUpperCase(), toLowerCase()}$</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.toUpperCase(); <span class="comment">// HELLO WORLD</span></span><br><span class="line"><span class="string">&#x27;Hello World&#x27;</span>.toLowerCase(); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>
<h3 id="查询子字符串"><a href="#查询子字符串" class="headerlink" title="查询子字符串"></a>查询子字符串</h3><p><code>string.indexOf(substr, pos)</code>，substr为要查询的子字符串，pos为从指定位置开始查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&#x27;Hello Word!&#x27;</span>;</span><br><span class="line">word.indexOf(<span class="string">&#x27;World&#x27;</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p>**Others: **</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello&quot;</span>.includes(<span class="string">&quot;el&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.startWith(<span class="string">&#x27;He&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.endWith(<span class="string">&#x27;lo&#x27;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="获取子字符串☑️"><a href="#获取子字符串☑️" class="headerlink" title="获取子字符串☑️"></a>获取子字符串☑️</h3><h4 id="slice-start-end"><a href="#slice-start-end" class="headerlink" title="slice( start[, end) )"></a>slice( start[, end) )</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">word.slice(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// Hel</span></span><br></pre></td></tr></table></figure>
<h4 id="substr-start-length"><a href="#substr-start-length" class="headerlink" title="substr( start[, length )"></a>substr( start[, length )</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">word.substr(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// ell</span></span><br></pre></td></tr></table></figure>
<h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><h4 id="小写字母总是大于大写字母"><a href="#小写字母总是大于大写字母" class="headerlink" title="小写字母总是大于大写字母"></a>小写字母总是大于大写字母</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> &gt; <span class="string">&#x27;Z&#x27;</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>在JS内部，所有字符串都使用UTF-16编码（即：每个字符都有相应的数字代码）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;zealand&quot;</span>.codePointAt(<span class="number">0</span>); <span class="comment">// 122</span></span><br><span class="line"><span class="string">&quot;Zealand&quot;</span>.codePointAt(<span class="number">0</span>); <span class="comment">// 90</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">90</span>); <span class="comment">// Z</span></span><br></pre></td></tr></table></figure>
<h1 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h1><ol>
<li><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Plum&quot;</span>];</span><br><span class="line"></span><br><span class="line">fruits[<span class="number">0</span>]; <span class="comment">// &quot;Apple&quot;</span></span><br><span class="line"></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;Pear&quot;</span>;</span><br><span class="line"></span><br><span class="line">fruits.length; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&#x27;Apple&#x27;</span>, &#123;<span class="attr">name</span>:<span class="string">&#x27;Will&#x27;</span>&#125;, <span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(<span class="string">&#x27;Hello&#x27;</span>);&#125;]; <span class="comment">// 任意类型数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><h2 id="队列Queue和栈Stack"><a href="#队列Queue和栈Stack" class="headerlink" title="队列Queue和栈Stack"></a>队列Queue和栈Stack</h2><ol>
<li><h3 id="队列Queue-—-First-In-First-Out"><a href="#队列Queue-—-First-In-First-Out" class="headerlink" title="队列Queue — First In First Out"></a>队列Queue — First In First Out</h3><blockquote>
<p>push —— 在末端加一个元素</p>
<p>shift —— 取出队首一个元素，并返回该值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>];</span><br><span class="line"></span><br><span class="line">fruits.push(<span class="string">&quot;Banana&quot;</span>); <span class="comment">// </span></span><br><span class="line">fruits; <span class="comment">// &quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;</span></span><br><span class="line"></span><br><span class="line">fruits.shift(); <span class="comment">// &quot;Apple&quot;</span></span><br><span class="line">fruits; <span class="comment">// &quot;Orange&quot;, &quot;Banana&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="栈Stack-—-Last-In-First-Out"><a href="#栈Stack-—-Last-In-First-Out" class="headerlink" title="栈Stack — Last In First Out"></a>栈Stack — Last In First Out</h3><blockquote>
<p>push</p>
<p>pop —— 从末端取出一个元素，并返回该值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.pop(); <span class="comment">// &quot;Pear&quot;</span></span><br><span class="line">fruits; <span class="comment">// &quot;Apple&quot;, &quot;Orange&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p>在数组首端添加元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.unshift(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">fruits; <span class="comment">// &quot;Banana&quot;, &quot;Apple&quot;, &quot;Orange&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><h2 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h2><p>数组本质上也是一个对象，<code>arr[0]</code>本质上类似<code>obj[key]</code>，arr是对象，数字是键</p>
</li>
<li><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><code>push/pop</code>运行较快，而<code>shift/unshift</code>运行较慢</p>
</li>
<li><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">  alert(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  alert(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h2 id="length-可修改"><a href="#length-可修改" class="headerlink" title="length 可修改"></a>length 可修改</h2></li>
<li><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(arr); <span class="comment">// &#x27;Apple,orange,Mango&#x27;</span></span><br><span class="line">arr.toString(); <span class="comment">// &#x27;Apple,orange,Mango&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="数组的方法‼️"><a href="#数组的方法‼️" class="headerlink" title="数组的方法‼️"></a>数组的方法‼️</h1></li>
</ol>
<h2 id="splice-start-deleteCount-element1-element2-…-—-in-place"><a href="#splice-start-deleteCount-element1-element2-…-—-in-place" class="headerlink" title="splice( start[, deleteCount, element1, element2, … ) — in-place"></a>splice( start[, deleteCount, element1, element2, … ) — in-place</h2><p><strong>可以实现插入、删除</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;I&quot;</span>, <span class="string">&quot;study&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;right&quot;</span>, <span class="string">&quot;now&quot;</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&quot;Let&#x27;s&quot;</span>, <span class="string">&quot;dance&quot;</span>); <span class="comment">// [&quot;I&quot;, &quot;study&quot;, &quot;JavaScript&quot;];</span></span><br><span class="line">arr; <span class="comment">// [&quot;Let&#x27;s&quot;, &quot;dance&quot;, &quot;right&quot;, &quot;now&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="slice-start-end-1"><a href="#slice-start-end-1" class="headerlink" title="slice( start[, end) )"></a>slice( start[, end) )</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.slice(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">// newArr = [&#x27;e&#x27;, &#x27;l&#x27;]</span></span><br></pre></td></tr></table></figure>
<h2 id="concat-arg1-arg2-…"><a href="#concat-arg1-arg2-…" class="headerlink" title="concat(arg1, arg2, …)"></a>concat(arg1, arg2, …)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.concat(<span class="number">5</span>, [<span class="number">7</span>,<span class="number">9</span>]); <span class="comment">// [1,2,3,5,7,9]</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line">arr.concat(obj1); <span class="comment">// [1,2,3,&#123;id: 1, name: &quot;Will&quot;&#125;]</span></span><br></pre></td></tr></table></figure>
<h2 id="遍历：forEach"><a href="#遍历：forEach" class="headerlink" title="遍历：forEach"></a>遍历：forEach</h2><p>array.forEach可以实现为数组中的每个元素都运行一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>用例如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Nottingham&quot;</span>, <span class="string">&quot;London&quot;</span>, <span class="string">&quot;Manchestor&quot;</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item&#125;</span> is at index <span class="subst">$&#123;index&#125;</span> in <span class="subst">$&#123;array&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="indexOf-lastIndexOf-includes"><a href="#indexOf-lastIndexOf-includes" class="headerlink" title="indexOf, lastIndexOf, includes"></a>indexOf, lastIndexOf, includes</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.indexOf(item, from); 从索引from开始找item，找到返回index，否则返回-1</span></span><br><span class="line"><span class="comment">// arr.lastindexOf(item, from); 同上，但从右向左</span></span><br><span class="line"><span class="comment">// arr.includes(item, from); 从索引from开始搜索item，找到返回true，否则返回false</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line">arr.includes(<span class="number">3</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure>
<h3 id="find-findindex"><a href="#find-findindex" class="headerlink" title="find, findindex"></a>find, findindex</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回true，则搜索停止并返回item</span></span><br><span class="line">  <span class="comment">// 返回false则返回undefined</span></span><br><span class="line">&#125;)；</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;Dion&quot;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;Akshay&quot;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = users.find(<span class="function">(<span class="params">user</span>)=&gt;</span>&#123;<span class="keyword">return</span> user.id==<span class="number">1</span>&#125;);</span><br><span class="line">user.name; <span class="comment">// &quot;Will&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="filter⭐️"><a href="#filter⭐️" class="headerlink" title="filter⭐️"></a>filter⭐️</h3><p>与find的类似，不过区别在于如果其返回true，搜索会继续直到遍历完整个数组，并返回所有匹配元素组成的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = users.filter(<span class="function"><span class="params">user</span> =&gt;</span> item.id &lt;= <span class="number">2</span>);</span><br><span class="line">user.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h2 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>对数组中的每个元素调用map参数中的该函数，并返回结果数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回新值而不是当前元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Dions&quot;</span>, <span class="string">&quot;Akshay&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> lengths = names.map(<span class="function"><span class="params">name</span> =&gt;</span> name.length);</span><br><span class="line">lengths; <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure>
<h3 id="sort-—-in-place"><a href="#sort-—-in-place" class="headerlink" title="sort — in-place"></a>sort — in-place</h3><p>对数组进行原位（in-place）排序，更改数组中元素的顺序，其语法为<code>数组.sort(排序函数)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a&gt;b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (a==b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (a&lt;b) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr.sort(compare); <span class="comment">// [1,2,4,9]</span></span><br><span class="line">arr; <span class="comment">// [1,2,4,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>实际上，排序函数可以返回任意数字（正数代表”大于”，负数代表”小于”）；同时使用箭头函数会更简洁</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort( <span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b ); <span class="comment">//[1,2,8,9]</span></span><br><span class="line">arr; <span class="comment">// [1,2,8,9]</span></span><br></pre></td></tr></table></figure>
<p><strong>localeCompare</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> countries = [<span class="string">&#x27;Österreich&#x27;</span>, <span class="string">&#x27;Andorra&#x27;</span>, <span class="string">&#x27;Vietnam&#x27;</span>];</span><br><span class="line"></span><br><span class="line">countries.sort( <span class="function">(<span class="params">a,b</span>) =&gt;</span> a.localeCompare(b) ); <span class="comment">// [Andorra,Österreich,Vietnam]</span></span><br></pre></td></tr></table></figure>
<h3 id="reverse-—-in-place"><a href="#reverse-—-in-place" class="headerlink" title="reverse — in-place"></a>reverse — in-place</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse();</span><br><span class="line"></span><br><span class="line">arr; <span class="comment">// [3,2,1]</span></span><br></pre></td></tr></table></figure>
<h3 id="split-join"><a href="#split-join" class="headerlink" title="split, join"></a>split, join</h3><ol>
<li><p><strong>分割字符串为数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = <span class="string">&quot;Will, Dion, Akshay&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = names.split(<span class="string">&#x27;, &#x27;</span>);</span><br><span class="line">arr; <span class="comment">// [&quot;Will&quot;, &quot;Dion&quot;, &quot;Akshay&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>合并数组元素为字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strName = arr.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">strName; <span class="comment">// &quot;Will Dion Akshay&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce, reduceRight"></a>reduce, reduceRight</h3></li>
</ol>
<p>用于根据数组计算单个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;, [initial]);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>accumulator本质上是个累加器。</p>
</li>
<li><p>应用reduce函数时，它会将上一个参数函数调用的结果作为第一个参数传递给下一个函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.reduce( <span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum+current, <span class="number">0</span> );</span><br><span class="line">res; <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h3><p>数组是基于对象的，因此无法使用<code>typeof</code>进行判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray( [] ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray( &#123;&#125; ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h1 id="可迭代对象（Iterable-Object）"><a href="#可迭代对象（Iterable-Object）" class="headerlink" title="可迭代对象（Iterable Object）"></a>可迭代对象（Iterable Object）</h1><p>可迭代对象是数组的泛化，任何对象都可以被定制为可在<code>for...of</code>循环中使用的对象。</p>
<h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><p><strong>为对象添加一个名为<code>Symbol.iterator</code>方法，便可使其可迭代</strong></p>
<ol>
<li>当<code>for...of</code>循环时，会调用该方法，同时该方法须返回一个<strong>迭代器</strong>（即有next()方法的对象）</li>
<li>此后，<code>for...of</code>仅作用于这个被返回的迭代器</li>
<li><code>for...of</code>会调用<code>next()</code>方法来取得下一个数值</li>
<li>next()返回的结果对象格式必须为：<code>&#123;done: Boolean, value: any&#125;</code>。其中当<code>done=true</code>时，迭代结束，否则<code>value</code>为下一个值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="number">1</span>,</span><br><span class="line">  to: <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个名为Symbol.iterator方法</span></span><br><span class="line">range[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回一个迭代器</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    current: <span class="built_in">this</span>.from,</span><br><span class="line">    last: <span class="built_in">this</span>.to,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加入next()方法</span></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 返回要求格式的对象</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.current &lt;= <span class="built_in">this</span>.last) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.current++ &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>:<span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  num; <span class="comment">// 1,2,3,4,5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串是可迭代的"><a href="#字符串是可迭代的" class="headerlink" title="字符串是可迭代的"></a>字符串是可迭代的</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">  char; <span class="comment">// &#x27;t&#x27;, &#x27;e&#x27;, &#x27;s&#x27;, &#x27;t&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>显示调用迭代器</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = str[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = iterator.next();</span><br><span class="line">  <span class="keyword">if</span> (res.done) <span class="keyword">break</span>;</span><br><span class="line">  res.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Array-from-—-将可迭代或类数组转化为数组对象（可使用数组的方法）"><a href="#Array-from-—-将可迭代或类数组转化为数组对象（可使用数组的方法）" class="headerlink" title="Array.from — 将可迭代或类数组转化为数组对象（可使用数组的方法）"></a>Array.from — 将可迭代或类数组转化为数组对象（可使用数组的方法）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>**Iterable(可迭代): **实现了Symbol.iterator方法的对象</li>
<li>**Array-like(类数组): **有索引和length属性的对象</li>
</ul>
<h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;World&quot;</span>,</span><br><span class="line">  length: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike);</span><br><span class="line">arr.pop(); <span class="comment">// &quot;World&quot;</span></span><br><span class="line">arr; <span class="comment">// [&quot;Hello&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="Array-from还提供了一个可选参数—映射-mapping-函数"><a href="#Array-from还提供了一个可选参数—映射-mapping-函数" class="headerlink" title="Array.from还提供了一个可选参数—映射(mapping)函数"></a>Array.from还提供了一个可选参数—映射(mapping)函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(obj, mapFunction, thisArg); <span class="comment">// thisArg允许我们为设置该函数设置this</span></span><br></pre></td></tr></table></figure>
<p><strong>用例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(range, <span class="function"><span class="params">num</span> =&gt;</span> num * num); <span class="comment">// 该函数会被应用于数组中的每个元素</span></span><br><span class="line">arr; <span class="comment">// [1,4,9,16,25]</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strArray = <span class="built_in">Array</span>.from(str);</span><br><span class="line"></span><br><span class="line">strArray; <span class="comment">// [&#x27;t&#x27;,&#x27;e&#x27;,&#x27;s&#x27;,&#x27;t&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1 id="Map-and-Set-—-映射和集合"><a href="#Map-and-Set-—-映射和集合" class="headerlink" title="Map and Set — 映射和集合"></a>Map and Set — 映射和集合</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul>
<li>Map是带键的数据项，但与对象（会将其转换为字符串）不同，键可以是任意类型</li>
<li>使用set、get方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> will = &#123;<span class="attr">name</span>:<span class="string">&quot;Will&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 字符串键</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>); <span class="comment">// 数字键</span></span><br><span class="line">map.set(<span class="literal">true</span>, <span class="string">&#x27;!!!&#x27;</span>); <span class="comment">// 布尔值键</span></span><br><span class="line">map.set(will, <span class="number">111</span>); <span class="comment">// 对象键</span></span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">map.get(<span class="number">1</span>); <span class="comment">// &#x27;world&#x27;</span></span><br><span class="line">map.get(<span class="literal">true</span>); <span class="comment">// &#x27;!!!&#x27;</span></span><br><span class="line">map.get(will); <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">map.size; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p><code>map.set</code>调用会返回map本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">map.set(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">	.set(<span class="number">1</span>, <span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">	.set(<span class="literal">true</span>, <span class="string">&#x27;!!!&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Map迭代"><a href="#Map迭代" class="headerlink" title="Map迭代"></a>Map迭代</h3><p>在map中使用循环，可使用如下方法：</p>
<ul>
<li>map.keys() — 返回所有的键</li>
<li>map.values() — 返回所有的值</li>
<li>Map.entries() — 返回所有的键值对</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> recipe = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;tomatoes&#x27;</span>, <span class="number">500</span>],</span><br><span class="line">  [<span class="string">&#x27;onion&#x27;</span>, <span class="number">300</span>],</span><br><span class="line">  [<span class="string">&#x27;bell pepper&#x27;</span>, <span class="number">50</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> veg <span class="keyword">of</span> recipe.keys()) &#123;</span><br><span class="line">  veg; <span class="comment">// tomatoes, onion, bell pepper</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> recipe.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry); <span class="comment">// [&#x27;tomatoes&#x27;, 500], ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>forEach</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">recipe.forEach( <span class="function">(<span class="params">value, key, map</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure>
<h3 id="Object-entries-—-从对象—-gt-Map"><a href="#Object-entries-—-从对象—-gt-Map" class="headerlink" title="Object.entries — 从对象—&gt;Map"></a>Object.entries — 从对象—&gt;Map</h3><p><code>new Map([key, value], [key, value], ...)</code></p>
<p>Object.entries()可以返回对象的键值对数组（其格式完全符合<code>Map</code>所需）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// Object.entries返回键值对数组[[&#x27;name&#x27;,&#x27;Will&#x27;], [&#x27;age&#x27;, 30]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>
<h3 id="Object-fromEntries-—-从Map—-gt-对象"><a href="#Object-fromEntries-—-从Map—-gt-对象" class="headerlink" title="Object.fromEntries — 从Map—&gt;对象"></a>Object.fromEntries — 从Map—&gt;对象</h3><p>给定一键值对数组返回一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> prices = <span class="built_in">Object</span>.fromEntries([</span><br><span class="line">  [<span class="string">&#x27;banana&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;orange&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">&#x27;apple&#x27;</span>, <span class="number">3</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(prices); <span class="comment">// &#123; banana: 1, orange: 2, apple: 3 &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set是集合并且无重复值，其方法有：</p>
<ol>
<li>new Set(iterable) — 创建一个set，如有iterable，将从其中复制值到set中</li>
<li>set.add(value) — 添加一个值并返回set</li>
<li>set.delete(value) — 删除值，如该值存在则返回true，否则返回false</li>
<li>set.has(value) — 如value存在set中，则返回true；否则返回false</li>
<li>set.clear() — 清空set</li>
<li>set.size — 返回元素个数</li>
</ol>
<h3 id="可迭代-iterable"><a href="#可迭代-iterable" class="headerlink" title="可迭代(iterable)"></a>可迭代(iterable)</h3><p>可以使用<code>for...of</code>和<code>forEach</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;oranges&quot;</span>, <span class="string">&quot;apples&quot;</span>, <span class="string">&quot;bananas&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> set) <span class="built_in">console</span>.log(value);</span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">value, valueAgain, set</span>) =&gt;</span> <span class="built_in">console</span>.log(value));</span><br></pre></td></tr></table></figure>
<p><strong>用于迭代的方法（同Map）</strong></p>
<ul>
<li>set.keys()</li>
<li>set.values()</li>
<li>set.entries()</li>
</ul>
<h1 id="弱映射和弱集合（WeakMap-amp-WeakSet）"><a href="#弱映射和弱集合（WeakMap-amp-WeakSet）" class="headerlink" title="弱映射和弱集合（WeakMap &amp; WeakSet）"></a>弱映射和弱集合（WeakMap &amp; WeakSet）</h1><p>略</p>
<h1 id="Object-keys-values-entries"><a href="#Object-keys-values-entries" class="headerlink" title="Object.keys, values, entries"></a>Object.keys, values, entries</h1><ul>
<li>Object.keys(obj) — 返回一个包含该对象的所有键的数组</li>
<li>Object.values(obj) — 返回一个包含该对象的所有值的数组</li>
<li>Object.entries(obj) — 返回一个包含该对象所有键值对（即[key, value]）的数组</li>
</ul>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="数组（Array）解构"><a href="#数组（Array）解构" class="headerlink" title="数组（Array）解构"></a>数组（Array）解构</h2><p>基本结构为：<code>[变量名1, 变量名2, ...]=[...]</code></p>
<ol>
<li><p><strong>变量名无所谓</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Koo&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [firstName, lastName] = arr;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用逗号忽略不想要的元素</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstName, , thirdOne] = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Sam&quot;</span>, <span class="string">&quot;Dion&quot;</span>, <span class="string">&quot;Ricky&quot;</span>];</span><br><span class="line"></span><br><span class="line">firstName; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">thirdOne; <span class="comment">// &quot;Dion&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><em><strong>任何可迭代对象都可以用数组解构赋值</strong></em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = <span class="string">&quot;USA&quot;</span>;</span><br><span class="line">[a,b,c]; <span class="comment">//[&#x27;U&#x27;,&#x27;S&#x27;,&#x27;A&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;A&#x27;</span>]);</span><br></pre></td></tr></table></figure></li>
<li><p><strong>交换变量值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> guest = <span class="string">&quot;People&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> admin = <span class="string">&quot;Will&quot;</span>;</span><br><span class="line"></span><br><span class="line">[guest, admin] = [admin, guest];</span><br><span class="line"></span><br><span class="line">[guest, admin]; <span class="comment">// [&#x27;Will&#x27;, &quot;People&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>剩余…</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">&quot;Will&quot;</span>, <span class="string">&quot;Dion&quot;</span>, <span class="string">&quot;Akshay&quot;</span>, <span class="string">&quot;Ricky&quot;</span>, <span class="string">&quot;Sam&quot;</span>];</span><br><span class="line"></span><br><span class="line">rest; <span class="comment">// [&quot;Akshay&quot;, &quot;Ricky&quot;, &quot;Sam&quot;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1=<span class="string">&quot;Anonymous&quot;</span>, name2=<span class="string">&quot;Will&quot;</span>] = [<span class="string">&quot;Dion&quot;</span>];</span><br><span class="line"></span><br><span class="line">name1; <span class="comment">// &quot;Dion&quot;</span></span><br><span class="line">name2; <span class="comment">// &quot;Will&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2></li>
</ol>
<p>基本语法：<code>let &#123;var1, var2, ...&#125; = &#123;var1:..., var2:..., ...&#125;</code>，其中等号左侧的变量名顺序不重要，但<strong>变量名必须与右侧对象中的属性名一致</strong>。</p>
<p>用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> personAdmin = &#123;</span><br><span class="line">  name: <span class="string">&quot;Will&quot;</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  major: <span class="string">&quot;CS&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, major&#125; = personAdmin;</span><br></pre></td></tr></table></figure>
<ol>
<li><p><strong>更改左侧的变量名</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: n, <span class="attr">age</span>: a, major&#125; = personAdmin;</span><br><span class="line">n; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">a; <span class="comment">// 24</span></span><br><span class="line">major; <span class="comment">// &quot;CS&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>默认值  =</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Dave&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age=<span class="number">90</span>, job=<span class="string">&quot;Invester&quot;</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// &quot;Dave&quot;</span></span><br><span class="line">age; <span class="comment">//90</span></span><br><span class="line">job; <span class="comment">// &quot;Inverster&quot;</span></span><br></pre></td></tr></table></figure>
<p>结合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">age</span>: a = <span class="number">90</span>, <span class="attr">job</span>: j = <span class="string">&quot;Invester&quot;</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// &quot;Dave&quot;</span></span><br><span class="line">a; <span class="comment">//90</span></span><br><span class="line">j; <span class="comment">// &quot;Inverster&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>剩余…</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;name, ...others&#125; = personAdmin;</span><br><span class="line"></span><br><span class="line">name; <span class="comment">// &quot;Will&quot;</span></span><br><span class="line">others; <span class="comment">// &#123;age: 24, major: &quot;CS&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>提前声明变量，之后调用</strong></p>
<p>不使用<code>let</code>时进行解构赋值，需要在最外侧加一个圆括号。这是因为<strong>JS会将主代码流的<code>&#123;...&#125;</code>当作一个代码块</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name, age, major;</span><br><span class="line"></span><br><span class="line">(&#123;name, age, major&#125; = personAdmin);</span><br></pre></td></tr></table></figure>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1></li>
</ol>
<p><strong>定义：</strong>JSON（JavaScript Object Notation）是表示值和对象的通用格式</p>
<h2 id="JSON-stringify-—-将对象转为JSON"><a href="#JSON-stringify-—-将对象转为JSON" class="headerlink" title="JSON.stringify — 将对象转为JSON"></a>JSON.stringify — 将对象转为JSON</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">  name: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">  isAdmin: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="built_in">JSON</span>.stringify(student);</span><br><span class="line"><span class="keyword">typeof</span> json; <span class="comment">// &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>注：</strong>通过<code>JSON.stringify()</code>方法将对象转换为字符串的过程称为 <strong>JSON编码</strong> 或 <strong>序列化（serialized）</strong>或<strong>字符串化</strong> 或 <strong>编组化</strong> </p>
</li>
<li><p><code>JSON</code>支持一下数据类型：</p>
<ol>
<li>Object <code>&#123;...&#125;</code></li>
<li>Array <code>[...]</code></li>
<li>Primitive:<ol>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
</ol>
</li>
</ol>
</li>
<li><p>不能有循环引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line">a.student = b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringfiy(b); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON-stringify完整语法"><a href="#JSON-stringify完整语法" class="headerlink" title="JSON.stringify完整语法"></a>JSON.stringify完整语法</h3></li>
</ul>
<p>JSON的完整语法为： <code>JSON.stringify(value, replacer, space)</code>。</p>
<p>其中：</p>
<ol>
<li><strong>value</strong> — 要编码的对象</li>
<li><strong>replacer</strong> — 要编码的属性数组（或者使用映射函数）</li>
<li><strong>space</strong> — 用于格式化的空格数量</li>
</ol>
<ul>
<li><p>使用完整语法避免循环引用报错</p>
<ol>
<li>使用属性数组</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line">a.student = b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(b, [<span class="string">&#x27;rank&#x27;</span>, <span class="string">&#x27;teacher&#x27;</span>]); <span class="comment">// &#x27;&#123;&quot;rank&quot;:2,&quot;teacher&quot;:&#123;&quot;rank&quot;:1&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用映射函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(b, <span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (key === <span class="string">&#x27;student&#x27;</span>) ? <span class="literal">undefined</span> : value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="自定义toJSON"><a href="#自定义toJSON" class="headerlink" title="自定义toJSON"></a>自定义toJSON</h3></li>
</ul>
<p><strong>说明：</strong>如果对象有<code>toJSON</code>方法，则<code>JSON.stringify</code>会自动调用该方法</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  rank: <span class="number">1</span>,</span><br><span class="line">  <span class="function"><span class="title">toJSON</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.rank;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">  rank: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">b.teacher = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a); <span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(b); <span class="comment">// &#x27;&#123;&quot;rank&quot;:2,&quot;teacher&quot;:1&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="JSON-parse-—-将JSON字符串转换为合适的数据格式"><a href="#JSON-parse-—-将JSON字符串转换为合适的数据格式" class="headerlink" title="JSON.parse — 将JSON字符串转换为合适的数据格式"></a>JSON.parse — 将JSON字符串转换为合适的数据格式</h2><p>基本语法：<code>JSON.parse(str, reviver)</code></p>
<p>其中：</p>
<ul>
<li><strong>str：</strong>要解析的JSON字符串</li>
<li><strong>reviver：</strong>可选函数，该函数对每个键值对<code>(key, value)</code>调用，并可改变其值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = <span class="string">&quot;[0,1,2,3]&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arrNums = <span class="built_in">JSON</span>.parse(nums);</span><br><span class="line">arrNums; <span class="comment">// [0,1,2,3]</span></span><br></pre></td></tr></table></figure>
<h3 id="使用reviver"><a href="#使用reviver" class="headerlink" title="使用reviver"></a>使用reviver</h3><p>用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> meetingJSON = <span class="string">&#x27;&#123;&quot;title&quot;: &quot;Conference&quot;, &quot;date&quot;: &quot;2021-10-04T16:00:00.000Z&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> wrongWay = <span class="built_in">JSON</span>.parse(meetingJSON);</span><br><span class="line">wrongWay; <span class="comment">// &#123;title: &#x27;Conference&#x27;, date: &#x27;2021-10-04T16:00:00.000Z&#x27;&#125; 可以看到date的值是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meetingObj = <span class="built_in">JSON</span>.parse(meetingJSON, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (key === <span class="string">&#x27;date&#x27;</span>) ? <span class="keyword">new</span> <span class="built_in">Date</span>(value) : value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">meetingObj; <span class="comment">// &#123;title: &#x27;Conference&#x27;, date: Mon Oct 04 2021 17:00:00 GMT+0100 (British Summer Time)&#125;</span></span><br><span class="line">meetingObj.date.getDate(); <span class="comment">// 可以正常运行</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>JSON是一种数据格式</li>
<li>JSON支持object, array, string, number, boolean, null</li>
<li>JavaScript提供序列化（serialize）成JSON的方法<code>JSON.stringify</code>和解析JSON的方法<code>JSON.parse</code></li>
<li>如果一个对象有<code>toJSON</code>方法，那么<code>JSON.stringify</code>会自动调用</li>
</ul>
]]></content>
  </entry>
</search>
