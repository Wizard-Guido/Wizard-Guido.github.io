<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>My first blog</title>
    <url>/2021/02/14/My-first-blog/</url>
    <content><![CDATA[<p>##Fist Charpter</p>
<p>content</p>
<hr>
<p>##Second Charpter</p>
<p>content</p>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>content</p>
<p>:wq</p>
]]></content>
  </entry>
  <entry>
    <title>Python virtualenv notes</title>
    <url>/2021/02/20/Python%20virtualenv%20notes/</url>
    <content><![CDATA[<h1 id="Python3-virtual-environment-construction"><a href="#Python3-virtual-environment-construction" class="headerlink" title="Python3 virtual environment construction"></a>Python3 virtual environment construction</h1><h2 id="1-Perface"><a href="#1-Perface" class="headerlink" title="1. Perface"></a>1. Perface</h2><ul>
<li><h3 id="Why-do-we-need-virtual-environment"><a href="#Why-do-we-need-virtual-environment" class="headerlink" title="Why do we need virtual environment"></a>Why do we need virtual environment</h3><p>Simply put, an individual virtual environment can be used by an individual python project so that every project won’t affect each other and also won’t affect the python system environment.</p>
</li>
<li><h3 id="Why-do-we-use-‘virtualenv’"><a href="#Why-do-we-use-‘virtualenv’" class="headerlink" title="Why do we use ‘virtualenv’"></a>Why do we use ‘virtualenv’</h3><p>In short, it’s the python official recommendation.</p>
</li>
</ul>
<hr>
<h2 id="2-Install-virtualenv"><a href="#2-Install-virtualenv" class="headerlink" title="2. Install virtualenv"></a>2. Install virtualenv</h2><p><em>PS: My laptop is MacBook, so the following procedure is based on the macbook terminal.</em></p>
<ol>
<li><p>Before installing, you should make sure you’ve already installed pip, and then use pip to install env.  </p>
<blockquote>
<p>pip3 install virtualenv</p>
</blockquote>
</li>
<li><p>Check if the installation is successful  </p>
<blockquote>
<p>virtualenv –version</p>
</blockquote>
</li>
<li><p>Create the big virtual environment  </p>
<p>Firstly, you should ‘cd’ to the directory where you wanna create VE(virtual environment)</p>
<blockquote>
<p> virtualenv envname #Here you should give your virtual environment name</p>
</blockquote>
<p>The environment will also install Python setuptools, pip, wheel automatically</p>
</li>
<li><p>Activate your environment</p>
<blockquote>
<p>Source bigenvname/bin/activate</p>
</blockquote>
</li>
<li><p>Extra procedure</p>
<p>For me, I often use terminal to start the editor, so when you activate the environment, Use ‘cd’ to the directory where you wanna store your code file. And then start jupyter notebook.</p>
<blockquote>
<p>jupyter notebook</p>
</blockquote>
<p>So now you can code in the envname virtual environment.</p>
</li>
</ol>
<hr>
<h2 id="3-Install-virtualenvwrapper"><a href="#3-Install-virtualenvwrapper" class="headerlink" title="3. Install virtualenvwrapper"></a>3. Install virtualenvwrapper</h2><p>*Note: Sometimes, we may create more than one VE, and we’d like to swap between the different VE. Hence, we need the command ‘workon’ which is belong to the package virtualenvwrapper. </p>
<ol>
<li><p>Install VEW. </p>
<blockquote>
<p>pip3 install virtualenvwrapper</p>
</blockquote>
</li>
<li><p>Configure VEW. </p>
<blockquote>
<p>export WORKON_HOME=’your sub-VE address’</p>
<p>source /usr/local/bin/virtualenvwrapper.sh  // execute the command package</p>
</blockquote>
<p>But what if your address is not the above default address, how could you find it? I faced the same problem before. We can try to uninstall the package ‘virtualenvwrapper’ and it will prompt us all the files address we would delete.</p>
<p>![截屏2021-02-20 13.24.51](/Users/arieskoo/Library/Application Support/typora-user-images/截屏2021-02-20 13.24.51.png)</p>
</li>
<li><p>After configuring all the environment parameters, we s=also need to execute source command to make it work. </p>
<blockquote>
<p>source ~/.bash_profile</p>
</blockquote>
</li>
</ol>
<hr>
<h2 id="4-Use-VEW-to-create-sub-environment"><a href="#4-Use-VEW-to-create-sub-environment" class="headerlink" title="4.  Use VEW to create sub-environment"></a>4.  Use VEW to create sub-environment</h2><ol>
<li><p>create sub-env</p>
<blockquote>
<p>makvirtualenv env01(envname)</p>
</blockquote>
<p>The default address is under the previous export WORKON_HOME=’your sub-VE address’.</p>
</li>
<li><p>Query the list of VE</p>
<blockquote>
<p>lsvirtualenv -b</p>
</blockquote>
</li>
<li><p>query the python pakcages</p>
<blockquote>
<p>lssitepackages</p>
</blockquote>
</li>
<li><p>exchange the sub-VE</p>
<blockquote>
<p>workon envname</p>
</blockquote>
</li>
<li><p>Remove sub-VE</p>
<blockquote>
<p>rmvirtualenv envname</p>
</blockquote>
</li>
<li><p>Install python packages in the sub-VE</p>
<blockquote>
<p>pip install packagename</p>
</blockquote>
</li>
<li><p>exit the sub-VE</p>
<blockquote>
<p>deactivate</p>
</blockquote>
</li>
<li><p>How to start VE every time start the PC</p>
<p>Since you totally exit the VE, you need to reactivate the big VE every time you wanna reenter it.</p>
<blockquote>
<p>cd big VE address</p>
<p>source bigenvname/bin/activate</p>
<p>workon sub-VEname</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>使用Python设置本地测试服务器</title>
    <url>/2021/09/16/Python-localServer/</url>
    <content><![CDATA[<h2 id="测试本地文件的问题"><a href="#测试本地文件的问题" class="headerlink" title="测试本地文件的问题"></a>测试本地文件的问题</h2><ul>
<li><strong>它们具有异步请求功能</strong>。如果您只是从本地文件运行示例，某些浏览器（包括 Chrome）将不会运行异步请求。这是因为安全限制。</li>
<li><strong>它们具有服务器端语言</strong>。服务器端语言（例如 PHP 或 Python）需要一个特殊的服务器来解释代码并交付结果。</li>
</ul>
<h2 id="利用Python建立简单本地HTTP服务器"><a href="#利用Python建立简单本地HTTP服务器" class="headerlink" title="利用Python建立简单本地HTTP服务器"></a>利用Python建立简单本地HTTP服务器</h2><ul>
<li><p>安装Python</p>
</li>
<li><p>运行命令行（我是mac），输入以下命令检查是否安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></li>
<li><p>cd到目标文件目录</p>
</li>
<li><p>启动服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure></li>
<li><p>默认端口号是8000，通过localhost:8000来访问此服务器</p>
</li>
<li><p><strong>PS:</strong> 切换端口号使用如下命令（以7800端口号为例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 7800</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em><strong>最后， Python的http.server只是静态文件服务器，他无法运行python、php、javascript等语言的代码，所以要在本地运行服务器端语言代码，可以使用Python Web框架，比如Django等</strong></em></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/02/16/Rnotebook/</url>
    <content><![CDATA[<h1 id="R-Lab1-Note"><a href="#R-Lab1-Note" class="headerlink" title="R Lab1 Note"></a>R Lab1 Note</h1><h3 id="1-Basic-Operations"><a href="#1-Basic-Operations" class="headerlink" title="1   Basic Operations"></a>1   Basic Operations</h3><h4 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a>Arithmetic Operations</h4><ol>
<li><p>Define variable</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">y &lt;- 20</span><br></pre></td></tr></table></figure></li>
<li><p>Calculation operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x + y</span><br><span class="line">x * y</span><br><span class="line">x / y</span><br><span class="line">x ^ y</span><br><span class="line">x %% y <span class="comment"># the module of x/y</span></span><br><span class="line"><span class="built_in">log</span>(x,y) <span class="comment"># The log to the base y of x</span></span><br><span class="line"><span class="built_in">sqrt</span>(x) <span class="comment"># the square root of x</span></span><br><span class="line">mean(<span class="built_in">c</span>(x,y)) <span class="comment"># the mean between x and y, but remember to use the vector in the mean function!!!</span></span><br><span class="line"><span class="built_in">trunc</span>(x) <span class="comment"># discard the decimals of x</span></span><br><span class="line"><span class="built_in">round</span>(x,y) <span class="comment"># generally use rounding and keep y decimal places, but will be affected by floating point numbers</span></span><br></pre></td></tr></table></figure>
<h4 id="Logical-Operations"><a href="#Logical-Operations" class="headerlink" title="Logical Operations"></a>Logical Operations</h4></li>
</ol>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &gt;= y -<span class="number">3</span> <span class="comment"># arithmetic operations take priority</span></span><br><span class="line">x &lt;= y</span><br><span class="line">x == y</span><br><span class="line">x != y</span><br><span class="line">w &lt;- <span class="literal">TRUE</span></span><br><span class="line">z &lt;- <span class="literal">FALSE</span></span><br><span class="line">!w <span class="comment"># not</span></span><br><span class="line">w | z <span class="comment"># or</span></span><br><span class="line">w &amp; z <span class="comment"># and</span></span><br><span class="line">isTRUE(operation) <span class="comment"># identify if the result is TRUE</span></span><br><span class="line">identical(x,y) <span class="comment"># only when the two objects are the same, it will return TRUE</span></span><br><span class="line">xor(operation1,operation2) <span class="comment"># only when one is TRUE and the other is FALSE, it will return TRUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># which, any, all, three of them all use logical vector as its argument e.g. vector &gt; 10</span></span><br><span class="line">which(vector &gt; <span class="number">10</span>) <span class="comment"># It returns the index of all the TRUE elements in the vector.</span></span><br><span class="line"><span class="built_in">any</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when one or some elements is TRUE, it will return TRUE</span></span><br><span class="line"><span class="built_in">all</span>(vector &gt; <span class="number">10</span>) <span class="comment"># when all the elements are TRUE, it will return TRUE</span></span><br></pre></td></tr></table></figure>


<hr>
<h3 id="2-Some-additional-functions"><a href="#2-Some-additional-functions" class="headerlink" title="2   Some additional functions"></a>2   Some additional functions</h3><blockquote>
<p><strong>For example</strong></p>
<p><strong>schoolmath</strong></p>
</blockquote>
<p><strong>Here are all its functions</strong></p>
<ol>
<li><p>cancel.fraction(numerator, denominator)</p>
<p><em>It cancels a fraction to its simplest form</em></p>
</li>
<li><p>decimal2fraction(decimal, period=0)</p>
<p><em>It converts a decimal number into a fraction and the argument period means the repeating ending number if it has.</em></p>
<p><em>E.g. 12.123444444…, so it will be decimal2fraction(12.123,4)</em></p>
</li>
<li><p>gcd(x, y)</p>
<p><em>It gives the greatest common divisor of two numbers, x and y</em></p>
</li>
<li><p>scm(x, y)</p>
<p><em>It gives the smallest common multiple of two numbers, x and y</em></p>
</li>
<li><p>is. type function</p>
<p><em>x can be a <strong>number</strong> or a <strong>vector</strong> and it returns <strong>TRUE/FALSE</strong></em></p>
<ul>
<li>is.decimal(x) </li>
<li>is.whole(x)</li>
<li>is.even(x)</li>
<li>Is.odd(x)</li>
<li>is.negative(x)</li>
<li>is.positive(x)</li>
<li>is.real.positive(x)      <em>zero is included as a positive number</em></li>
<li>is.prim(x)</li>
</ul>
</li>
<li><p>prime.factor(x)</p>
<p><em>It gives a <strong>vector</strong> of all the prime-factors (except 1) of a number x</em></p>
</li>
<li><p>primes(start, end)</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between start number and end number, if it’s not given start and end, it will give all the prim-numbers</em></p>
</li>
<li><p>primlist</p>
<p><em>It gives a <strong>vector</strong> of prime-numbers between 1 and 9999999</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">primlist[<span class="number">1</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p>#[1]  1  2  3  5  7 11 13 17 19 23</p>
</li>
</ol>
<h3 id="3-Some-Data-Structures"><a href="#3-Some-Data-Structures" class="headerlink" title="3    Some Data Structures"></a>3    Some Data Structures</h3><blockquote>
<p><em><strong>There are vectors, sequences, matrices, lists, arrays and data frames.</strong></em></p>
</blockquote>
<h4 id="3-1-Vectors-and-Sequences"><a href="#3-1-Vectors-and-Sequences" class="headerlink" title="3-1  Vectors and Sequences"></a>3-1  Vectors and Sequences</h4><h5 id="How-to-define-vectors-and-sequences"><a href="#How-to-define-vectors-and-sequences" class="headerlink" title="How to define vectors and sequences"></a>How to define vectors and sequences</h5><ol>
<li><p>Vectors</p>
<p>Use the c() function, which stands for ‘concatenate’:  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a &lt;- <span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>If you want to create a vector with the same repeated value, use rep(x, times=) or rep(x, each=):  </p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),times=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 2 3 1 2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rep</span>(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),each=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>#[1]  1 1 2 2 3 3</p>
</li>
<li><p>Sequences</p>
<p>Use the : operator or the seq(from=, to=, by=) function</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">b &lt;- 1:<span class="number">100</span></span><br><span class="line">b1 &lt;- seq(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">b2 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>)</span><br><span class="line">b3 &lt;- seq(from=<span class="number">1</span>, to=<span class="number">100</span>, by=<span class="number">1</span>)</span><br><span class="line">b4 &lt;- seq(to=<span class="number">100</span>, from=<span class="number">1</span>, by=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>#all the 5 outputs are same</p>
</li>
</ol>
<h5 id="Some-arithmetic-and-logical-operations"><a href="#Some-arithmetic-and-logical-operations" class="headerlink" title="Some arithmetic and logical operations"></a>Some arithmetic and logical operations</h5><ol>
<li><p>Select certain element using index</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    2 3</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    1 2 3</p>
<p>For index selection, sequences are the same as vectors.</p>
<p><em><strong>NOTICE: In R, the first index is 0 which is totally different from most of other script languages!!!</strong></em></p>
</li>
<li><p>Logical operations application</p>
<p><strong>&gt;  &lt;  ==  !=</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE TRUE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a[a&gt;<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>#[1]    3</p>
<p>For logical operations, sequences are the same as vectors.</p>
</li>
<li><p>Arithmetic operations</p>
<p> <em>In most cases, these operations are performed</em> <em><strong>element by element</strong></em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a + <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 5 6</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a - -<span class="number">3</span>:-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>#[1]    4 4 4</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">a == <span class="number">5</span>:<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>#[1]    FALSE FALSE FALSE</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    1.000000 1.414214 1.732051</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">mean(a)</span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sd(a) <span class="comment"># standard deviation</span></span><br></pre></td></tr></table></figure>
<p>#[1]    1</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">median(a) <span class="comment"># median</span></span><br></pre></td></tr></table></figure>
<p>#[1]    2</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary(a) <span class="comment"># min max mean med quartile infromation</span></span><br></pre></td></tr></table></figure>
<p>#Min. 1st Qu.  Median    Mean  3rd Qu.    Max.</p>
<p>   1.0       1.5          2.0            2.0       2.5         3.0 </p>
</li>
</ol>
<h4 id="3-2-Matrices"><a href="#3-2-Matrices" class="headerlink" title="3-2  Matrices"></a>3-2  Matrices</h4><h5 id="1-How-to-define-matrices"><a href="#1-How-to-define-matrices" class="headerlink" title="1. How to define matrices"></a>1. How to define matrices</h5><ul>
<li>Use <strong>matrix()</strong> function, </li>
</ul>
<p>matrix(vector, nrow=r, ncol=c, byrow=FALSE, dimnames=list(char_vector_rownames, char_vector_colnames))</p>
<p><em>The default is the matrix is filled by columns</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st row&quot;</span>, <span class="string">&quot;2nd row&quot;</span>)</span><br><span class="line">cnames &lt;- <span class="built_in">c</span>(<span class="string">&quot;1st col&quot;</span>, <span class="string">&quot;2nd col&quot;</span>)</span><br><span class="line">A &lt;- matrix(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),nrow=<span class="number">2</span>,byrow=<span class="literal">TRUE</span>, <span class="built_in">dimnames</span>=<span class="built_in">list</span>(rnames, cnames))</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Use bind function, <strong>rbind()     cbind()</strong></p>
<p><em>bind by row: rbind(v1, v2, …)</em></p>
<p><em>bind by col: bind(v1, v2, …)</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A &lt;- rbind(<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>The two outputs are the same.</p>
</li>
</ul>
<h5 id="2-How-to-use-index"><a href="#2-How-to-use-index" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><p><em>Generally, matrices are 2 dimensions, so [rownumber, colnumber] can locate the certain element in the matrix.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[<span class="number">1</span>,<span class="number">2</span>] <span class="comment"># the element at the 1st row and 2nd col</span></span><br></pre></td></tr></table></figure>
<p><em>If we’d like to get certain whole row or column, we should leave the other dimension blank.</em></p>
<p>e.g.</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[,<span class="number">2</span>] <span class="comment"># 2nd column</span></span><br><span class="line">A[<span class="number">1</span>,] <span class="comment"># 1st row</span></span><br><span class="line">A[<span class="number">1</span>:<span class="number">2</span>,<span class="number">1</span>] <span class="comment"># row 1,2 of column 1</span></span><br><span class="line">A[<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>),<span class="built_in">c</span>(<span class="number">1</span>,<span class="number">2</span>)] <span class="comment">#row 1,2 of column 1,2</span></span><br><span class="line">A[-<span class="number">1</span>,] <span class="comment"># drop 1st row and show other rows</span></span><br><span class="line">A[A%%2==<span class="number">0</span>] <span class="comment"># all the even numbers</span></span><br></pre></td></tr></table></figure>
<h5 id="3-Arithmetic-logical-and-statistical-operations"><a href="#3-Arithmetic-logical-and-statistical-operations" class="headerlink" title="3. Arithmetic, logical and statistical operations"></a>3. Arithmetic, logical and statistical operations</h5><ul>
<li><p><em>Mostly, the operations are performed element by element</em></p>
<p><strong>+  -  *  /  ^</strong></p>
</li>
<li><p>arithmetic matrix operation</p>
<p>e.g. <strong>%*%</strong> is the arithmetic matrix multiplication</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A %*% B</span><br></pre></td></tr></table></figure></li>
<li><p>statistical operation</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sqrt</span>(A)</span><br><span class="line">mean(A) <span class="comment"># mean of all values</span></span><br><span class="line">rowMeans(A) <span class="comment"># mean by row</span></span><br><span class="line">colMeans(A) <span class="comment"># mean by column</span></span><br><span class="line">sd(A)</span><br><span class="line"><span class="built_in">length</span>(A) <span class="comment"># the number of all elements</span></span><br><span class="line">ncol(A) <span class="comment"># the number of columns</span></span><br><span class="line">nrow(A) <span class="comment"># the number of rows</span></span><br><span class="line">rowSums(A) <span class="comment"># the sum of each row</span></span><br><span class="line">colSums(A) <span class="comment"># the sum of each column</span></span><br></pre></td></tr></table></figure></li>
<li><p>logical operation</p>
<p><strong>element by element</strong></p>
<p><em>==    !=    &gt;    &lt;</em></p>
</li>
</ul>
<h4 id="3-3-Arrays"><a href="#3-3-Arrays" class="headerlink" title="3-3  Arrays"></a>3-3  Arrays</h4><h5 id="1-How-to-define"><a href="#1-How-to-define" class="headerlink" title="1. How to define"></a>1. How to define</h5><p><em>Arrays are similar to matrices but can have over 2 dimensions</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra &lt;- array(<span class="number">1</span>:<span class="number">8</span>,<span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>), <span class="built_in">dimnames</span>=<span class="built_in">list</span>(<span class="built_in">c</span>(<span class="string">&#x27;x1&#x27;</span>,<span class="string">&#x27;x2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;y1&#x27;</span>,<span class="string">&#x27;y2&#x27;</span>),<span class="built_in">c</span>(<span class="string">&#x27;z1&#x27;</span>,<span class="string">&#x27;z2&#x27;</span>))) <span class="comment"># 3D array which is the 2*2*2 structure</span></span><br></pre></td></tr></table></figure>
<h5 id="2-How-to-use-index-1"><a href="#2-How-to-use-index-1" class="headerlink" title="2. How to use index"></a>2. How to use index</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra[,,<span class="number">1</span>]</span><br><span class="line">arra[,,<span class="string">&#x27;z1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>The two outputs are both the 1st layer of 3rd axis.</p>
<h5 id="3-Operations"><a href="#3-Operations" class="headerlink" title="3. Operations"></a>3. Operations</h5><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">arra1 &lt;- array(sample.int(<span class="number">100</span>,<span class="number">27</span>), <span class="built_in">dim</span>=<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)) <span class="comment"># sample functiongenerates 27 random numbers between 0 and 100</span></span><br></pre></td></tr></table></figure>
<p><em>Most of them are the same as matrices, except statistical functions e.g. colMeans(), rowMeans() and rowSums(), colSums()</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rowMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be three numbers, of which one is <strong>mean of arra1[1/2/3,,]</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">colMeans(arra1)</span><br></pre></td></tr></table></figure>
<p>The output will be a 3*3 matrix, where each element is <strong>the mean of arra1[,1/2/3,1/2/3]</strong></p>
<h3 id="4-Simple-Plots"><a href="#4-Simple-Plots" class="headerlink" title="4  Simple Plots"></a>4  Simple Plots</h3><h4 id="How-to-define"><a href="#How-to-define" class="headerlink" title="How to define"></a>How to define</h4><p><em>Use plot() function</em></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">diagram1 &lt;- plot(x, y, col=<span class="string">&quot;colorname&quot;</span>, type=<span class="string">&quot;the type of plot e.g. p/l/c/o/s/h/n&quot;</span>, pch=<span class="string">&quot;the shape of dot e.g. 0:25&quot;</span>, main=<span class="string">&quot;title&quot;</span>, xlab=<span class="string">&quot;X Label&quot;</span>, ylab=<span class="string">&quot;Y Label&quot;</span>, bg=<span class="string">&quot;dot color only when pch=21:25&quot;</span>, ...)</span><br></pre></td></tr></table></figure>


<p>Finally, there’re still some knowledge I haven’t mentioned, such as data frame and some more complicated applications of all the structures and plot() function. They will be discussed in the following notes later.</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
